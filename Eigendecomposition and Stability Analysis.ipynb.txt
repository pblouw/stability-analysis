{
 "metadata": {
  "name": "",
  "signature": "sha256:8a4916df89baad7200f2c61b18d82b4a158957bdb11bf3fca249d6978355467d"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Stability Analysis of a Constraint Parser\n",
      "This notebook describes how to analyze the behavior of a very simple constraint-based parser. The parser is implemented using a recurrently connected neural population, and functions to match inputs to complete parse trees that are encoded as HRRs. The parse trees are generated from a simple grammar of five context-free rewrite rules. Four trees in total are generated by the grammar. "
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "##Step 1: Define a Simple Grammar"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import numpy as np\n",
      "import scipy as sp\n",
      "import random\n",
      "import nengo\n",
      "import nengo.spa as spa\n",
      "import matplotlib.pyplot as plt\n",
      "\n",
      "# Define a set of context-free rewrite rules for a toy grammar\n",
      "rules = {\"S\":[[\"NP\",\"VP\"],[\"AUX\",\"NP\",\"VP\"]],\n",
      "         \"NP\":[[\"DET\",\"N\"]],\n",
      "         \"VP\":[[\"V\"],[\"V\",\"NP\"]]}\n",
      "\n",
      "# Generate terminating paths of the grammar as strings for an HRR parser\n",
      "def extend(path):\n",
      "    tip = path[-1]\n",
      "    if tip in rules:\n",
      "        expand = random.choice(rules[tip])\n",
      "        symbol = random.choice(expand)\n",
      "        if len(expand) < 2:\n",
      "            tag = 'M'\n",
      "        elif len(expand) > 2:\n",
      "            tag = ['L','M','R'][expand.index(symbol)]\n",
      "        else:\n",
      "            tag = ['L','R'][expand.index(symbol)]\n",
      "        return extend(path+[tag,'*',symbol])\n",
      "    else:\n",
      "        return ''.join(path)\n",
      "    \n",
      "def generate_paths(n=100, paths=[]):\n",
      "    if n==0:\n",
      "        return paths\n",
      "    else:\n",
      "        sample = extend(['S'])\n",
      "        if sample not in paths:\n",
      "            paths.append(sample)\n",
      "        return generate_paths(n-1, paths)\n",
      "\n",
      "all_paths = generate_paths()\n",
      "    \n",
      "# Group the paths for defining the constraints\n",
      "det_paths = [p for p in all_paths if 'DET' in p]\n",
      "aux_paths = [p for p in all_paths if 'AUX' in p]\n",
      "n_paths = [p for p in all_paths if p[-1] is 'N']\n",
      "v_paths = [p for p in all_paths if p[-1] is 'V']\n",
      "\n",
      "print det_paths\n",
      "print n_paths\n",
      "print v_paths\n",
      "print aux_paths"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "javascript": [
        "\n",
        "        require([\"widgets/js/widget\", \"widgets/js/manager\"],\n",
        "            function(widget, manager) {\n",
        "          if (typeof widget.DOMWidgetView == 'undefined') {\n",
        "            widget = IPython;\n",
        "          }\n",
        "          if (typeof manager.WidgetManager == 'undefined') {\n",
        "            manager = IPython;\n",
        "          }\n",
        "\n",
        "          var NengoProgressBar = widget.DOMWidgetView.extend({\n",
        "            render: function() {\n",
        "              // $el is the DOM of the widget\n",
        "              this.$el.css({width: '100%', marginBottom: '0.5em'});\n",
        "              this.$el.html([\n",
        "                '<div style=\"',\n",
        "                    'width: 100%;',\n",
        "                    'border: 1px solid #cfcfcf;',\n",
        "                    'border-radius: 4px;',\n",
        "                    'text-align: center;',\n",
        "                    'position: relative;\">',\n",
        "                  '<div class=\"pb-text\" style=\"',\n",
        "                      'position: absolute;',\n",
        "                      'width: 100%;\">',\n",
        "                    '0%',\n",
        "                  '</div>',\n",
        "                  '<div class=\"pb-bar\" style=\"',\n",
        "                      'background-color: #bdd2e6;',\n",
        "                      'width: 0%;',\n",
        "                      'transition: width 0.1s linear;\">',\n",
        "                    '&nbsp;',\n",
        "                  '</div>',\n",
        "                '</div>'].join(''));\n",
        "            },\n",
        "\n",
        "            update: function() {\n",
        "              this.$el.css({width: '100%', marginBottom: '0.5em'});\n",
        "              var progress = 100 * this.model.get('progress');\n",
        "              var text = this.model.get('text');\n",
        "              this.$el.find('div.pb-bar').width(progress.toString() + '%');\n",
        "              this.$el.find('div.pb-text').text(text);\n",
        "            },\n",
        "          });\n",
        "\n",
        "          manager.WidgetManager.register_widget_view(\n",
        "            'NengoProgressBar', NengoProgressBar);\n",
        "        });"
       ],
       "metadata": {},
       "output_type": "display_data",
       "text": [
        "<IPython.core.display.Javascript at 0x10585d710>"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['SM*NPL*DET', 'SL*NPL*DET', 'SR*VPR*NPL*DET']\n",
        "['SM*NPR*N', 'SL*NPR*N', 'SR*VPR*NPR*N']\n",
        "['SR*VPM*V', 'SR*VPL*V']\n",
        "['SL*AUX']\n"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Step 2: Convert the Grammar into a set of Constraints between Terminating Paths\n",
      "\n",
      "These constraints are hand-coded from an examination of the trees the grammar generates, but ideally we should be able to convert any context-free grammar into a set of constraints of this sort. If the constraints are defined between individual constituents of a parse tree, this can be done using methods from Hale and Smolensky (2006). However, because we are using terminating paths, these methods cannot be applied here. "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Change to order used for constraints (should fix generator wrt to this)\n",
      "det_paths = ['SL*NPL*DET','SM*NPL*DET','SR*VPR*NPL*DET']\n",
      "n_paths = ['SL*NPR*N','SM*NPR*N','SR*VPR*NPR*N']\n",
      "v_paths = ['SR*VPM*V','SR*VPL*V']\n",
      "aux_paths = ['SL*AUX']\n",
      "\n",
      "pos_constraints = [(det_paths[0],n_paths[0]),\n",
      "                   (det_paths[1],n_paths[1]),\n",
      "                   (det_paths[1],aux_paths[0]),\n",
      "                   (det_paths[2],n_paths[2]),\n",
      "                   (det_paths[2],v_paths[1]),\n",
      "                   (n_paths[1],aux_paths[0]),\n",
      "                   (n_paths[2],v_paths[1])]\n",
      "\n",
      "neg_constraints = [(det_paths[0],det_paths[1]),\n",
      "                   (det_paths[0],n_paths[1]),\n",
      "                   (det_paths[0],aux_paths[0]),\n",
      "                   (det_paths[1],n_paths[0]),\n",
      "                   (det_paths[2],v_paths[0]),\n",
      "                   (n_paths[0],n_paths[1]),\n",
      "                   (n_paths[0],aux_paths[0]),\n",
      "                   (n_paths[2],v_paths[0]),\n",
      "                   (v_paths[1],v_paths[0])]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Step 3: Generate a Transform Matrix that Encodes the Constraints\n",
      "\n",
      "Each constraint is implemented as a weighted sum the two outer products that can be formed from the pair of paths that the constraint is defined over. The weight is 1 if the constraint is positive, and -1 if the constraint is negative. "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Initialize a SPA vocabulary for the path representations\n",
      "dimensions = 128\n",
      "\n",
      "vocab = spa.Vocabulary(dimensions, max_similarity=0.05)\n",
      "for path in all_paths:\n",
      "    vocab.parse(path)\n",
      "\n",
      "vocab = vocab.create_subset(all_paths)\n",
      "\n",
      "# Generate the recurrent transform matrix.\n",
      "# Note that the matrix is guaranteed to be symmetric. \n",
      "weights = np.zeros((dimensions,dimensions))\n",
      "\n",
      "for con in pos_constraints:\n",
      "    if con[1] != con[0]:\n",
      "        weights += np.outer(vocab[con[1]].v, vocab[con[0]].v)\n",
      "        weights += np.outer(vocab[con[0]].v, vocab[con[1]].v)\n",
      "for con in neg_constraints:\n",
      "    if con[1] != con[0]:\n",
      "        weights += -1*np.outer(vocab[con[1]].v, vocab[con[0]].v)\n",
      "        weights += -1*np.outer(vocab[con[0]].v, vocab[con[1]].v)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/Users/eliasmiths/code/nengo/nengo/spa/vocab.py:106: UserWarning: Could not create a semantic pointer with max_similarity=0.05 (D=128, M=10)\n",
        "  len(self.pointers)))\n",
        "/Users/eliasmiths/code/nengo/nengo/spa/vocab.py:106: UserWarning: Could not create a semantic pointer with max_similarity=0.05 (D=128, M=15)\n",
        "  len(self.pointers)))\n",
        "/Users/eliasmiths/code/nengo/nengo/spa/vocab.py:106: UserWarning: Could not create a semantic pointer with max_similarity=0.05 (D=128, M=16)\n",
        "  len(self.pointers)))\n",
        "/Users/eliasmiths/code/nengo/nengo/spa/vocab.py:106: UserWarning: Could not create a semantic pointer with max_similarity=0.05 (D=128, M=17)\n",
        "  len(self.pointers)))\n",
        "/Users/eliasmiths/code/nengo/nengo/spa/vocab.py:106: UserWarning: Could not create a semantic pointer with max_similarity=0.05 (D=128, M=18)\n",
        "  len(self.pointers)))\n",
        "/Users/eliasmiths/code/nengo/nengo/spa/vocab.py:106: UserWarning: Could not create a semantic pointer with max_similarity=0.05 (D=128, M=20)\n",
        "  len(self.pointers)))\n"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Step 4: Perform Stability Analysis on the Weight Matrix\n",
      "\n",
      "Note that the eigenvalue decomposition tends to generate extremely small numbers in place of eigenvalues of zero. As such, we ignore values with an absolute values of less than 0.001. The rank of an NxN matrix of is equal to the number of non-zero eigenvalues (since N-r is equal to dimensionality of the matrix's nullspace, which is comprised of eigenvectors with an eigenvalue of 0). To examine the behavior of a system defined by this weight matrix, we convert a hypothetical input into a linear combination of the eigenvectors of the matrix and then solve for the state of the system after an arbitrary amount of time by determining coefficents on the eigenvectors that give the system state at this time."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "eigvals, eigvecs = np.linalg.eig(weights)\n",
      "\n",
      "print 'Matrix Rank:'\n",
      "rank = np.linalg.matrix_rank(weights)\n",
      "print rank\n",
      "\n",
      "print ''\n",
      "print 'Eigenvalues:'\n",
      "for val in eigvals:\n",
      "    if abs(val.real) > 0.001:\n",
      "        print (val.real)\n",
      "        \n",
      "# Test the conversion of an input into a linear combination of eigenvectors\n",
      "sp_input = vocab['SL*AUX'] + vocab['SR*VPM*V']\n",
      "coefficients = np.linalg.solve(eigvecs, sp_input.v)\n",
      "\n",
      "# This should return 'Passed!' if the combination of eigenvectors is equal to the input\n",
      "print ''\n",
      "print 'Eigenbasis Test:'\n",
      "if np.allclose(np.dot(eigvecs,coefficients), sp_input.v) == True:\n",
      "    print 'Passed!'"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Matrix Rank:\n",
        "9\n",
        "\n",
        "Eigenvalues:\n",
        "4.85160628735\n",
        "3.17076206451\n",
        "-1.24822263436\n",
        "-1.18631318494\n",
        "-1.06858437536\n",
        "-0.957394363203\n",
        "-0.803252463011\n",
        "-0.744773927317\n",
        "-0.630247634513\n",
        "\n",
        "Eigenbasis Test:\n",
        "Passed!\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Now we want to see what the system does over time when given this input. With a matrix difference equation, we just multiply the input vector by the matrix to the power of t (time) to get the state of the system at that time.  However, in Nengo, we will be solving differential equations.  These two solutions are the same in the limit if we set the difference A_d = A_t+I where A_t is the matrix for the differential equation.  That is:\n",
      "\n",
      "$x_{t+1}-x_t = A_t x_t $\n",
      "\n",
      "$x_{t+1} = A_t x_t + x_t $\n",
      "\n",
      "$= (A_t + I)x_t$\n",
      "\n",
      "Starting with the difference version:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "eigvals, eigvecs = np.linalg.eig(weights+np.eye(dimensions))\n",
      "coefficients = np.linalg.solve(eigvecs, sp_input.v)\n",
      "\n",
      "time = 2\n",
      "solution = np.dot(eigvecs, coefficients * eigvals**time)\n",
      "\n",
      "# Note that the eigvals > 1 cause the solution to blow up. \n",
      "# Norm of vector increases very rapidly. \n",
      "print ''\n",
      "print 'Norm of vector after '+str(time)+' time steps'\n",
      "print np.linalg.norm(solution)\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Norm of vector after 2 time steps\n",
        "15.2192347544\n"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can compare the coefficients on the eigenvectors between times. Essentially this tells us that the system moves toward a state dominated by the vectors with eigenvalues with abs val >= 1. We only look at the vectors whose weights change (i.e. the vectors whose eigenvalues are non-zero - the first nine)"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print 'Change to weights on first 9 eigenvectors after computing solution:'\n",
      "for i in range(rank):\n",
      "    print 'Start: %f   End: %f' % (coefficients[i], coefficients[i]*eigvals[i]**time)\n",
      "    "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Change to weights on first 9 eigenvectors after computing solution:\n",
        "Start: 0.261288   End: 8.946826\n",
        "Start: -0.707759   End: -12.311658\n",
        "Start: -0.351382   End: -0.021650\n",
        "Start: 0.121609   End: 0.004221\n",
        "Start: 0.036444   End: 0.004982\n",
        "Start: -0.381513   End: -0.014768\n",
        "Start: -0.640877   End: -0.041747\n",
        "Start: 0.149883   End: 0.000272\n",
        "Start: 0.876588   End: 0.004123\n"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can also treat the weight matrix as encoding a differential equation. The form of the solution in this case changes slightly to include an exponential term. The systems behaves slightly differently in this case - the corresponding to the positive eigenvalues blowup, but the rest go to zero. We can perform a comparison between the two solutions by computing a normalized dot product. This comparison indicates that solutions are quite similar with respect to the direction in the space they point towards. Changing t indicates that the solutions converge as t grows."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "eigvals, eigvecs = np.linalg.eig(weights)\n",
      "coefficients = np.linalg.solve(eigvecs, sp_input.v)\n",
      "\n",
      "print 'Solution assuming the matrix encodes a differential equation:'\n",
      "new_solution = np.dot(eigvecs, coefficients * np.exp(eigvals*time))\n",
      "\n",
      "print ''\n",
      "print 'Norm of vector after '+str(time)+' time steps'\n",
      "print np.linalg.norm(new_solution)\n",
      "\n",
      "print ''\n",
      "print 'Change to weights on first 9 eigenvectors after computing solution:'\n",
      "for i in range(rank):\n",
      "    print 'Start: %f   End: %f' % (coefficients[i], coefficients[i]*np.exp(eigvals[i]*time))\n",
      "\n",
      "print ''\n",
      "print 'Normalized dot product of the two solutions:'\n",
      "print np.dot(solution / np.linalg.norm(solution), new_solution / np.linalg.norm(new_solution)).real"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Solution assuming the matrix encodes a differential equation:\n",
        "\n",
        "Norm of vector after 2 time steps\n",
        "4296.13520971\n",
        "\n",
        "Change to weights on first 9 eigenvectors after computing solution:\n",
        "Start: -0.261288   End: -4277.307646\n",
        "Start: 0.707759   End: 401.767350\n",
        "Start: -0.351382   End: -0.028946\n",
        "Start: 0.121609   End: 0.011338\n",
        "Start: -0.876588   End: -0.103427\n",
        "Start: 0.149883   End: 0.022089\n",
        "Start: -0.381513   End: -0.076527\n",
        "Start: 0.640877   End: 0.144502\n",
        "Start: 0.036444   End: 0.010332\n",
        "\n",
        "Normalized dot product of the two solutions:\n",
        "0.660938937439\n"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "This similarity will increase and become = 1 as the number of timesteps increases."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Step 5: Test Parsing Performance\n",
      "The preceding analysis indicates that any input to a parsing system using our constraint matrix should be modified in accordance with its representation as a linear combination of eigenvectors. The system should thus move towards a state that is biased to those SP's that share similar weights to the input on the eigenvectors that change the most over time. For example, if 'SLxNPLxDET' has a large weight on the first eigenvector, the solution state blows up this eigenvector, and any other SP that has a large weight on the first eigenvector will be proportionally more similar to the solution state than other SP's (e.g. an SP with a negative weight on the first eigenvector will be more dissimilar to the solution state). We can observe that SP's for terminating paths that have a postive constraint defined between them tend to have similar weights on these eigenvectors of interest (and vice versa for negative constraints)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Coefficient comparison for paths with varyings constraints between them\n",
      "DET_coeffs = np.linalg.solve(eigvecs, vocab['SL*NPL*DET'].v)\n",
      "N_coeffs = np.linalg.solve(eigvecs, vocab['SL*NPR*N'].v)\n",
      "AUX_coeffs = np.linalg.solve(eigvecs, vocab['SL*AUX'].v)\n",
      "\n",
      "print 'Comparison of weights on first 9 eigenvectors for a pair of positively constrained paths:'\n",
      "for i in range(rank):\n",
      "    print 'P1: %f   P2: %f' % (DET_coeffs[i], N_coeffs[i])\n",
      "   \n",
      "print ''\n",
      "print 'Comparison of weights on first 9 eigenvectors for a pair of negatively constrained paths:'\n",
      "for i in range(rank):\n",
      "    print 'P1: %f   P2: %f' % (DET_coeffs[i], AUX_coeffs[i])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Comparison of weights on first 9 eigenvectors for a pair of positively constrained paths:\n",
        "P1: 0.443859   P2: 0.506380\n",
        "P1: -0.097131   P2: -0.179479\n",
        "P1: 0.251258   P2: 0.080448\n",
        "P1: 0.518484   P2: 0.117391\n",
        "P1: -0.000516   P2: 0.078638\n",
        "P1: -0.589677   P2: 0.639137\n",
        "P1: -0.107877   P2: 0.340657\n",
        "P1: 0.310392   P2: 0.379854\n",
        "P1: -0.076807   P2: -0.126877\n",
        "\n",
        "Comparison of weights on first 9 eigenvectors for a pair of negatively constrained paths:\n",
        "P1: 0.443859   P2: -0.461427\n",
        "P1: -0.097131   P2: 0.163802\n",
        "P1: 0.251258   P2: 0.147246\n",
        "P1: 0.518484   P2: 0.168752\n",
        "P1: -0.000516   P2: -0.728574\n",
        "P1: -0.589677   P2: 0.085069\n",
        "P1: -0.107877   P2: -0.066553\n",
        "P1: 0.310392   P2: 0.246232\n",
        "P1: -0.076807   P2: -0.327078\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "-c:8: ComplexWarning: Casting complex values to real discards the imaginary part\n"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Now we can try to parse inputs. We provide a partial tree as an input, and see which terminating paths are present in the state vector of the system after some specified time interval. Because the grammar we started with produces 4 trees, four unique tests are applied. In each test, a minimal number of paths from the tree are provided as input, and the resulting output is tested to see if it contains the entire tree. "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Time to get solution at\n",
      "time = 20\n",
      "\n",
      "def normalize(v):\n",
      "    return v / np.linalg.norm(v)\n",
      "\n",
      "def get_parse(vocab, solution):\n",
      "    parse = []\n",
      "    for sp in vocab.keys:\n",
      "       if np.dot(vocab[sp].v, normalize(solution)).real > 0:\n",
      "            parse.append(sp)\n",
      "            print sp\n",
      "    return parse\n",
      "\n",
      "def test(prompt, condition):\n",
      "    coefficients = np.linalg.solve(eigvecs, prompt)\n",
      "    solution = np.dot(eigvecs, coefficients * np.exp(eigvals*time))\n",
      "    parse = get_parse(vocab, solution)\n",
      "    condition = condition.split('+')\n",
      "    if set(parse) == set(condition):\n",
      "        print 'Test Passed'\n",
      "        \n",
      "    else:\n",
      "        print 'Test Failed'\n",
      "    \n",
      "    \n",
      "# Test 1: Correct result is 'SL*NPL*DET+SL*NPR*N+SR*VPM*V'\n",
      "# We test by providing a path or two as input.\n",
      "# Try changing these to assess robustness.\n",
      "print 'TEST 1:'\n",
      "sp_input = vocab['SL*NPL*DET'].v + vocab['SR*VPM*V'].v\n",
      "test(sp_input, 'SL*NPL*DET+SL*NPR*N+SR*VPM*V')\n",
      "\n",
      "print ''\n",
      "print 'TEST 2:'\n",
      "# Test 2: Correct result is 'SL*NPL*DET+SL*NPR*N+SR*VPL*V+SR*VPR*NPL*DET+SR*VPR*NPR*N'\n",
      "sp_input = vocab['SL*NPR*N'].v + vocab['SR*VPL*V'].v\n",
      "test(sp_input, 'SL*NPL*DET+SL*NPR*N+SR*VPL*V+SR*VPR*NPL*DET+SR*VPR*NPR*N')     \n",
      "\n",
      "print ''\n",
      "print 'TEST 3:'\n",
      "# Test 4: Correct result is 'SL*AUX+SM*NPL*DET+SM*NPR*N+SR*VPM*V'\n",
      "sp_input = vocab['SM*NPL*DET'].v + vocab['SR*VPM*V'].v\n",
      "test(sp_input, 'SL*AUX+SM*NPL*DET+SM*NPR*N+SR*VPM*V')\n",
      "\n",
      "\n",
      "print ''\n",
      "print 'TEST 4:'\n",
      "# Test 2: Correct result is 'SL*AUX+SM*NPL*DET+SM*NPR*N+SR*VPL*V+SR*VPR*NPL*DET+SR*VPR*NPR*N'\n",
      "sp_input = vocab['SM*NPR*N'].v + vocab['SR*VPL*V'].v\n",
      "test(sp_input, 'SL*AUX+SM*NPL*DET+SM*NPR*N+SR*VPL*V+SR*VPR*NPL*DET+SR*VPR*NPR*N')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "TEST 1:\n",
        "SR*VPM*V\n",
        "SL*NPL*DET\n",
        "SL*NPR*N\n",
        "Test Passed\n",
        "\n",
        "TEST 2:\n",
        "SR*VPM*V\n",
        "SL*NPL*DET\n",
        "SL*NPR*N\n",
        "Test Failed\n",
        "\n",
        "TEST 3:\n",
        "SM*NPL*DET\n",
        "SL*AUX\n",
        "SR*VPL*V\n",
        "SM*NPR*N\n",
        "SR*VPR*NPL*DET\n",
        "SR*VPR*NPR*N\n",
        "Test Failed\n",
        "\n",
        "TEST 4:\n",
        "SM*NPL*DET\n",
        "SL*AUX\n",
        "SR*VPL*V\n",
        "SM*NPR*N\n",
        "SR*VPR*NPL*DET\n",
        "SR*VPR*NPR*N\n",
        "Test Passed\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Overall, each input is mapped to an output that, when normalized, has a non-zero dot-product with only those vectors that belong in the parse of the input. This result seems to be consistent across different random initializations, but no robust testing has been performed yet. Future work will likely need to look at using more complex grammars that incorporate word representations rather than parts of speech.\n",
      "\n",
      "One puzzling issue has cropped up, though: longer processing times seem to produce worse results. This is peculiar given that the output ought to converge on the best parse of the input. "
     ]
    }
   ],
   "metadata": {}
  }
 ]
}